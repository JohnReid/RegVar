#!/usr/bin/env python

import cPickle
import biopsy
import numpy as np
import logging
from regvar import claussnitzer as cl
from regvar import pssms

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


def make_bifa_seq_vec(seqs):
    "Convert a sequence of sequences into a form suitable for BiFa."
    result = biopsy.SequenceVec()
    for s in seqs:
        result.append(s)
    return result


#
# Parse Table S1 from the Claussnitzer paper
S1 = cl.parseS1('S1.csv')

#
# Show some data
print S1.head()
print S1.columns

#
# Get the PSSMs we are going to use
bifa_matrices = pssms.get_pssms()
np.random.seed(1)
bifa_matrices = np.random.choice(bifa_matrices, 15, replace=False)
bifa_accs = [p.acc for p in bifa_matrices]
bifa_pssms = make_bifa_seq_vec(map(str, bifa_accs))

#
# Iterate through each SNP
for row_it in S1.iterrows():
    row = row_it[1]
    # print row.ProxySNP, row.Chr, row.Position
    seqfile = 'S1-sequences/{0}.pkl'.format(row.ProxySNP)
    sequences = cPickle.load(open(seqfile))
    hits, maximal_chain, unadjusted_hits = \
        biopsy.score_pssms_on_phylo_sequences(
            bifa_pssms,
            make_bifa_seq_vec(sequences)
        )
    if len(hits) > 10:
        break
    logger.info('%s has %d hits in human and %d sequences',
                row.ProxySNP, len(unadjusted_hits[0]), len(sequences))
